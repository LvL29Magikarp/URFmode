local Katarina_Ver = "0.012"

if myHero.charName ~= "Katarina" then return end

HWID = Base64Encode(tostring(os.getenv("PROCESSOR_IDENTIFIER")..os.getenv("USERNAME")..os.getenv("COMPUTERNAME")..os.getenv("PROCESSOR_LEVEL")..os.getenv("PROCESSOR_REVISION")))
id = 237
ScriptName = "BlueKatarina"
assert(load(Base64Decode("G0x1YVIAAQQEBAgAGZMNChoKAAAAAAAAAAAAAQIDAAAAJQAAAAgAAIAfAIAAAQAAAAQKAAAAVXBkYXRlV2ViAAEAAAACAAAADAAAAAQAETUAAAAGAUAAQUEAAB2BAAFGgUAAh8FAAp0BgABdgQAAjAHBAgFCAQBBggEAnUEAAhsAAAAXwAOAjMHBAgECAgBAAgABgUICAMACgAEBgwIARsNCAEcDwwaAA4AAwUMDAAGEAwBdgwACgcMDABaCAwSdQYABF4ADgIzBwQIBAgQAQAIAAYFCAgDAAoABAYMCAEbDQgBHA8MGgAOAAMFDAwABhAMAXYMAAoHDAwAWggMEnUGAAYwBxQIBQgUAnQGBAQgAgokIwAGJCICBiIyBxQKdQQABHwCAABcAAAAECAAAAHJlcXVpcmUABAcAAABzb2NrZXQABAcAAABhc3NlcnQABAQAAAB0Y3AABAgAAABjb25uZWN0AAQQAAAAYm9sLXRyYWNrZXIuY29tAAMAAAAAAABUQAQFAAAAc2VuZAAEGAAAAEdFVCAvcmVzdC9uZXdwbGF5ZXI/aWQ9AAQHAAAAJmh3aWQ9AAQNAAAAJnNjcmlwdE5hbWU9AAQHAAAAc3RyaW5nAAQFAAAAZ3N1YgAEDQAAAFteMC05QS1aYS16XQAEAQAAAAAEJQAAACBIVFRQLzEuMA0KSG9zdDogYm9sLXRyYWNrZXIuY29tDQoNCgAEGwAAAEdFVCAvcmVzdC9kZWxldGVwbGF5ZXI/aWQ9AAQCAAAAcwAEBwAAAHN0YXR1cwAECAAAAHBhcnRpYWwABAgAAAByZWNlaXZlAAQDAAAAKmEABAYAAABjbG9zZQAAAAAAAQAAAAAAEAAAAEBvYmZ1c2NhdGVkLmx1YQA1AAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAMAAAADAAAAAwAAAAMAAAAEAAAABAAAAAUAAAAFAAAABQAAAAYAAAAGAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAgAAAAHAAAABQAAAAgAAAAJAAAACQAAAAkAAAAKAAAACgAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAAMAAAACwAAAAkAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAGAAAAAgAAAGEAAAAAADUAAAACAAAAYgAAAAAANQAAAAIAAABjAAAAAAA1AAAAAgAAAGQAAAAAADUAAAADAAAAX2EAAwAAADUAAAADAAAAYWEABwAAADUAAAABAAAABQAAAF9FTlYAAQAAAAEAEAAAAEBvYmZ1c2NhdGVkLmx1YQADAAAADAAAAAIAAAAMAAAAAAAAAAEAAAAFAAAAX0VOVgA="), nil, "bt", _ENV))()

local REQUIRED_LIBS = {
["SOW"] = "https://raw.githubusercontent.com/honda7/BoL/master/Common/SOW.lua",
["VPrediction"] = "https://raw.githubusercontent.com/honda7/BoL/master/Common/VPrediction.lua"
}

local DOWNLOADING_LIBS, DOWNLOAD_COUNT = false, 0

function AfterDownload()
	DOWNLOAD_COUNT = DOWNLOAD_COUNT - 1
	if DOWNLOAD_COUNT == 0 then
		DOWNLOADING_LIBS = false
		print("<font color=\"#FF0000\"><b>BlueKatarina</b></font> <font color=\"#FFFFFF\">Required libraries downloaded successfully, please reload (double F9).</font>")
	end
end

_G.BlueKatarina_Autoupdate = true

for DOWNLOAD_LIB_NAME, DOWNLOAD_LIB_URL in pairs(REQUIRED_LIBS) do
	if FileExist(LIB_PATH .. DOWNLOAD_LIB_NAME .. ".lua") then
		require(DOWNLOAD_LIB_NAME)
	else
		DOWNLOADING_LIBS = true
		DOWNLOAD_COUNT = DOWNLOAD_COUNT + 1
		DownloadFile(DOWNLOAD_LIB_URL, LIB_PATH .. DOWNLOAD_LIB_NAME..".lua", AfterDownload)
	end
end

if DOWNLOADING_LIBS then return end

local UPDATE_NAME = "BlueKatarina"
local UPDATE_HOST = "raw.github.com"
local UPDATE_PATH = "/LvL29Magikarp/URFmode/master/BlueKatarina".."?rand="..math.random(1,10000)
local UPDATE_FILE_PATH = SCRIPT_PATH..UPDATE_NAME..".lua"
local UPDATE_URL = "https://"..UPDATE_HOST..UPDATE_PATH

function AutoupdaterMsg(msg) print("<font color=\"#FF0000\">"..UPDATE_NAME..":</font> <font color=\"#FFFFFF\">"..msg..".</font>") end
if _G.BlueKatarina_Autoupdate then
	local ServerData = GetWebResult(UPDATE_HOST, UPDATE_PATH)
	if ServerData then
		local ServerVersion = string.match(ServerData, "local Katarina_Ver = \"%d+.%d+\"")
		ServerVersion = string.match(ServerVersion and ServerVersion or "", "%d+.%d+")
		if ServerVersion then
			ServerVersion = tonumber(ServerVersion)
			if tonumber(Katarina_Ver) < ServerVersion then
				AutoupdaterMsg("New version available"..ServerVersion)
				AutoupdaterMsg("Updating, please don't press F9")
				DownloadFile(UPDATE_URL, UPDATE_FILE_PATH, function () AutoupdaterMsg("Successfully updated. ("..Katarina_Ver.." => "..ServerVersion.."), press F9 twice to load the updated version.") end)	 
			else
				AutoupdaterMsg("You have got the latest version ("..ServerVersion..")")
			end
		end
	else
		AutoupdaterMsg("Error downloading version info")
	end
end

	local ts
    ts = TargetSelector(TARGET_LOW_HP_PRIORITY,700)
	
--[[ END AUTOUPDATE --]]



        local DFGSlot, HXGSlot, BWCSlot, YGSlot, BoRKSlot, QSSlot, MSSlot, RHSlot, MKSlot, OmenSlot, SESlot, SRSlot, SoTDSlot, TSSlot, ZHSlot = nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
        local DFGREADY, HXGREADY, BWCREADY, YGREADY, BoRKREADY, QSREADY, MSREADY, RHREADY, MKREADY, OmenREADY, SEREADY, SRREADY, SoTDREADY, TSREADY, ZHREADY = false, false, false, false, false, false, false, false, false, fasle, false, false, false, false, false
        local dfgrange = 750
        local hxgrange = 750
        local bwcrange = 500
        local range = 700
            local tsrange = 700


function dmg()
for i=1, heroManager.iCount do
		local enemy = heroManager:GetHero(i)
			if ValidTarget(enemy) and enemy ~= nil then
			qDmg = (((myHero:CanUseSpell(_Q) == READY) and getDmg("Q",enemy,myHero)) or 0)
			wDmg = (((myHero:CanUseSpell(_W) == READY) and getDmg("W",enemy,myHero)) or 0)
			eDmg = (((myHero:CanUseSpell(_E) == READY) and getDmg("E",enemy,myHero)) or 0)
end
end
end
				
function OnLoad()
	KatarinaMenu()
	ulting = false
	VP = VPrediction()
	Orbwalker = SOW(VP)
	KatarinaMenu:addSubMenu("Orbwalking Settings", "Orbwalking")
	Orbwalker:LoadToMenu(KatarinaMenu.Orbwalking)
	UpdateWeb(true, ScriptName, id, HWID)
end

function OnTick()
	if ComboFast() then
	ComboFast() end
	ts:update()
	Target = ts.target
	if CastWAuto() then
	CastWAuto() end
	item()
	--CC()
	dmg()
end

function KatarinaMenu()
	KatarinaMenu = scriptConfig("BlueKatarina", "Katarina")
	
	KatarinaMenu:addSubMenu("Keys", "Combo")
		KatarinaMenu.Combo:addParam("ComboFast", "Fast Combo", SCRIPT_PARAM_ONKEYDOWN, false, 32)
	KatarinaMenu:addSubMenu("ComboExtra", "ComboExtra")
		KatarinaMenu.ComboExtra:addParam("Packets", "Use Packets (soon)", SCRIPT_PARAM_ONOFF, true)
		KatarinaMenu.ComboExtra:addParam("CastWAuto", "Cast W Auto", SCRIPT_PARAM_ONOFF, true)
		KatarinaMenu.ComboExtra:addParam("AutoZhonya", "Use Zhonya When Hp %", SCRIPT_PARAM_SLICE, 20,0,100,0)
		--KatarinaMenu.ComboExtra:addParam("Qss", "Auto Qss When Stunned", SCRIPT_PARAM_ONOFF, true)
		KatarinaMenu.ComboExtra:addParam("stopE", "Stop ult with E", SCRIPT_PARAM_ONOFF, true)
	KatarinaMenu:addSubMenu("Drawrange", "Drawrange")
		KatarinaMenu.Drawrange:addParam("RangeQ", "Range Q", SCRIPT_PARAM_ONOFF, true)
		KatarinaMenu.Drawrange:addParam("RangeW", "Range W", SCRIPT_PARAM_ONOFF, true)
		KatarinaMenu.Drawrange:addParam("RangeE", "Range E", SCRIPT_PARAM_ONOFF, true)
		KatarinaMenu.Drawrange:addParam("RangeR", "Range R", SCRIPT_PARAM_ONOFF, true)
		TargetSelector = TargetSelector(TARGET_LESS_CAST, 700, DAMAGE_MAGIC, true)
			TargetSelector.name = "Katarina"
			KatarinaMenu:addTS(TargetSelector)
end

function ComboFast()
	if KatarinaMenu.Combo.ComboFast then
	itemattack()
		CastQ()
		CastE()
		CastW()
		CastR()
	end
end

function CastE()
	if ts.target ~= nil and ValidTarget(ts.target, 700) and KatarinaMenu.Combo.ComboFast and (myHero:CanUseSpell(_E) == READY) then
            CastSpell(_E, ts.target)
        end
	end
function CastQ()
	if ts.target ~= nil and ValidTarget(ts.target, 675) and KatarinaMenu.Combo.ComboFast and (myHero:CanUseSpell(_Q) == READY) then
            CastSpell(_Q, ts.target)
        end
	end
function CastW()
	if ts.target ~= nil and ValidTarget(ts.target, 375) and KatarinaMenu.Combo.ComboFast and (myHero:CanUseSpell(_W) == READY) then
            CastSpell(_W, ts.target)
        end
	end
function CastWAuto()
	if ts.target ~= nil and ValidTarget(ts.target, 375) and KatarinaMenu.ComboExtra.CastWAuto and (myHero:CanUseSpell(_W) == READY) then
            CastSpell(_W, ts.target)
        end
	end
function CastR()
	if ts.target ~= nil and ValidTarget(ts.target, 550) and KatarinaMenu.Combo.ComboFast and (myHero:CanUseSpell(_R) == READY) then
            CastSpell(_R)
        end
	end
function OnDraw()
   if KatarinaMenu.Drawrange.RangeQ then
         DrawCircle(myHero.x, myHero.y, myHero.z, 675, 0xDDDDDD)
		 end
	 if KatarinaMenu.Drawrange.RangeW then
         DrawCircle(myHero.x, myHero.y, myHero.z, 375, 0xDDDDDD)
		 end
		  if KatarinaMenu.Drawrange.RangeE then
         DrawCircle(myHero.x, myHero.y, myHero.z, 700, 0xDDDDDD)
		 end
			if KatarinaMenu.Drawrange.RangeR then
         DrawCircle(myHero.x, myHero.y, myHero.z, 550, 0xDDDDDD)
	
		end
end

--[[

function CC()
        if KatarinaMenu.ComboExtra.Qss then
                if (myHero:CanUseSpell(QSSlot) == READY) and myHero.canMove == false then
                        CastSpell(QSSlot)
                end
        end
end

--]]

function OnProcessSpell(object,spell)
	if object == myHero then
		if spell.name:lower():find("katarinar") then
			ulting = true
		end
	end
end

function OnWndMsg(msg, key)
	if msg == WM_RBUTTONDOWN and ulting then 
		ulting = false
	end
end

function OnGainBuff(unit, buff)
	if unit.isMe and buff.name == "katarinarsound" then
		ulting = true
	end
end

function OnLoseBuff(unit, buff)
	if unit.isMe and buff.name == "katarinarsound" then
		ulting = false
	end
end

function item()
DFGSlot, HXGSlot, BWCSlot, YGSlot, BoRKSlot, QSSlot, MSSlot, RHSlot, MKSlot, OmenSlot, SESlot, SRSlot, SoTDSlot, TSSlot, ZHSlot, BTSlot =
GetInventorySlotItem(3128), GetInventorySlotItem(3146), GetInventorySlotItem(3144), GetInventorySlotItem(3142), GetInventorySlotItem(3153), GetInventorySlotItem(3140),
GetInventorySlotItem(3139), GetInventorySlotItem(3074), GetInventorySlotItem(3222), GetInventorySlotItem(3143), GetInventorySlotItem(3040), GetInventorySlotItem(3069), 
GetInventorySlotItem(3131), GetInventorySlotItem(3023), GetInventorySlotItem(3157), GetInventorySlotItem(3188)
           
            DFGREADY = (DFGSlot ~= nil and myHero:CanUseSpell(DFGSlot) == READY)
            HXGREADY = (HXGSlot ~= nil and myHero:CanUseSpell(HXGSlot) == READY)
            BWCREADY = (BWCSlot ~= nil and myHero:CanUseSpell(BWCSlot) == READY)
            YGSREADY = (YGSSlot ~= nil and myHero:CanUseSpell(YGSlot) == READY)
            BoRKREADY = (BoRKSlot ~= nil and myHero:CanUseSpell(BoRKSlot) == READY)
            QSREADY = (QSSlot ~= nil and myHero:CanUseSpell(QSSlot) == READY)
            MSREADY = (MSSlot ~= nil and myHero:CanUseSpell(MSSlot) == READY)
            RHREADY = (RHSlot ~= nil and myHero:CanUseSpell(RHSlot) == READY)
            MKREADY = (MKSlot ~= nil and myHero:CanUseSpell(MKSlot) == READY)
            OmenREADY = (OmenSlot ~= nil and myHero:CanUseSpell(OmenSlot) == READY)
            SEREADY = (SESlot ~= nil and myHero:CanUseSpell(SESlot) == READY)
            SRREADY = (SRSlot ~= nil and myHero:CanUseSpell(SRSlot) == READY)
            SoTDREADY = (SoTDSlot ~= nil and myHero:CanUseSpell(SoTDSlot) == READY)
            TSREADY = (TSSlot ~= nil and myHero:CanUseSpell(TSSlot) == READY)
            ZHREADY = (ZHSlot ~= nil and myHero:CanUseSpell(ZHSlot) == READY)
            BTREADY = (BTSlot ~= nil and myHero:CanUseSpell(BTSLOT) == READY)
			
 if not myHero.dead then
      if ZHREADY and myHero.health <= (myHero.maxHealth*(KatarinaMenu.ComboExtra.AutoZhonya*0.01)) then CastSpell(ZHSlot) end
      if SEREADY and myHero.health <= (myHero.maxHealth*(KatarinaMenu.ComboExtra.AutoZhonya*0.01)) then CastSpell(SESlot) end
end
end
function itemattack()
if ts.target then
      if DFGREADY then CastSpell(DFGSlot, ts.target) end
      if HXGREADY then CastSpell(HXGSlot, ts.target) end
      if BWCREADY then CastSpell(BWCSlot, ts.target) end
      if BoRKREADY then CastSpell(BoRKSlot, ts.target) end
      if BTREADY then CastSpell(BTSlot, ts.target) end
 
 end
end


function OnSendPacket(packet)
    local UltPacket = Packet(packet)
    if ulting then
        --Now we set what we want to block (Move, Cast normal spells and Summoner spells) and check if it really is our hero
        if (UltPacket:get("name") == "S_MOVE" or "S_CAST") or (UltPacket:get("spellId") == SUMMONER_1 or SUMMONER_2) then
            if UltPacket:get("sourceNetworkId") == myHero.networkID then
                if KatarinaMenu.ComboExtra.stopE and GetDistance(Target) < 700 and (myHero:CanUseSpell(_E) == READY) and (myHero:CanUseSpell(_W) == READY) and getDmg("E", Target, myHero) + (getDmg("E", Target, myHero) > Target.health) then
				return
                else
                    UltPacket:block()
                end
            end
        end
    end
end
